package client.service.mobile

import cn.smartx.core.model.JellyInjectBase
import org.apache.commons.lang3.StringUtils
import java.util.HashMap
import com.aolc.designer.utils.Constants
import java.util.ArrayList
import org.apache.cayenne.query.Ordering
import org.apache.cayenne.query.SortOrder
import com.aolc.designer.MstRecruit
import com.aolc.designer.AcctUserCompany
import com.aolc.designer.AcctUser

PAGE CellGetRecruit(title="获取招聘列表",path="branch") extends JellyInjectBase{
    EVENT SERVICE{
        var result = new HashMap();
        var pagesize = request.get("pagesize");
        var pagenum = request.get("pagenum");
        var category = request.get("category");
        if(pagesize == null || StringUtils.isBlank(pagesize+"")){
            pagesize = 10;
        }else{
            pagesize = Integer.parseInt(pagesize+"");
        }
        if(pagenum == null || StringUtils.isBlank(pagenum+"")){
            pagenum = 0;
        }else{
            pagenum = Integer.parseInt(pagenum+"");
        }
        var sql = "1=1";
        var String ejbsql = "select count(uniqueid) from MstRecruit u where 1=1";
        if(category != null && StringUtils.isNotBlank(category+"")){
            sql += " and category='"+category+"'";
            ejbsql += " and u.category = '"+category+"'";
        }
        var recruitList = new ArrayList();
        var orders = new ArrayList();
        var order = new Ordering("createTime",SortOrder.DESCENDING);
        orders.add(order);
        var recruits = context.databaseLoader.getByConditionPagination(MstRecruit,sql,null,orders,pagesize as Integer,pagenum as Integer);
        var count = context.databaseLoader.getQueryTotalCount(ejbsql);
        for(recruit :recruits){
            var userInfo = context.databaseLoader.getEntityByCondition(AcctUserCompany,"userUniqueid = '"+recruit.userUniqueid+"'");
            var user = context.databaseLoader.getEntityByCondition(AcctUser,"uniqueid = '"+recruit.userUniqueid+"'");
            var recruitMap = new HashMap();
            recruitMap.put("title",recruit.title);
            recruitMap.put("enterprise_nature",userInfo.enterpriseNature);
            recruitMap.put("time",utils.toDateString(recruit.createTime));
            recruitMap.put("compensation_benefit",recruit.compensationBenefit);
            recruitMap.put("avatar",context.getResourceThumbUrl(user.avatar));
            recruitMap.put("category",recruit.category);
            recruitMap.put("uniqueid",recruit.uniqueid);
            recruitMap.put("address",recruit.address);
            recruitMap.put("job_detail",recruit.jobDetail);
            recruitMap.put("tags",recruit.tags);

            recruitList.add(recruitMap);
        }
        result.put(Constants.ERROR_CODE,Constants.SUCCESS);
        result.put(Constants.TOTAL_NUM,count);
        result.put("recruits",recruitList);
        return result;
    }
}