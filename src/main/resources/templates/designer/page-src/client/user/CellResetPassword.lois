package client.service.mobile

import cn.smartx.core.model.JellyInjectBase
import org.apache.commons.lang3.StringUtils
import java.util.HashMap
import com.aolc.designer.utils.Constants
import cn.smartx.core.service.validate.ValidateManager
import cn.smartx.core.service.validate.sms.SMSErrorMsg
import com.aolc.designer.AcctUser
import com.aolc.designer.utils.MD5

PAGE CellResetPassword(title="重置密码",path="branch") extends JellyInjectBase{
    EVENT SERVICE{
        var result = new HashMap();
        var token = request.get("email_token");
        var email = request.get("email");
        var code = request.get("code");
        var password = request.get("password");
        if(token==null
                ||email ==null
                ||code == null
                ||password == null
                ||StringUtils.isBlank(token+"")
                ||StringUtils.isBlank(email+"")
                ||StringUtils.isBlank(code+"")
                ||StringUtils.isBlank(password+"")){
            result.put(Constants.ERROR_CODE,Constants.ERROR_PARAM_INCORRECT);
            result.put(Constants.MESSAGE,i18n.get("param_incorrect"));
        }else{
            var SMSErrorMsg validate = ValidateManager.getInstance.validateCodeWithPhone(token+"",code+"",email+"");
            if(validate.validate){
                var user = context.databaseLoader.getEntityByCondition(AcctUser,"username = '"+email+"'");
                user.password =MD5.GetMD5Code(password+"");
                context.submit;
                result.put(Constants.ERROR_CODE,Constants.SUCCESS);
            }else if(SMSErrorMsg.PHONE_NUMBER_NOT_SAME == validate.type){
                result.put(Constants.ERROR_CODE,Constants.ERROR_PHONE_NUMBER_NOT_SAME);
                result.put(Constants.MESSAGE,i18n.get("phone_number_not_same"));
            }else if(SMSErrorMsg.VALIDATE_CODE_ERROR == validate.type){
                result.put(Constants.ERROR_CODE,Constants.ERROR_VALIDATE_CODE_ERROR);
                result.put(Constants.MESSAGE,i18n.get("validate_code_error"));
            }else{
                result.put(Constants.ERROR_CODE,Constants.ERROR_VALIDATE_CODE_TIMEOUT);
                result.put(Constants.MESSAGE,i18n.get("validate_code_timeout"));
            }
        }
        return result;
    }
}